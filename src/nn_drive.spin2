{ Neural Network
  port of
        http://robotics.hobbizine.com/arduinoann.html
  Also read
        https://mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/

  Only drive capability

  To train and generate NN weights use either
        nn_training.spin2
  or (recommended)
        https://github.com/timmoore/propbot/trainer
}

OBJ
  utilities     : "utilities"
  nn_config     : "nn_config"

VAR
  long fHidden[nn_config.HiddenNodes]                                           ' hidden values
  long fOutput[nn_config.OutputNodes]                                           ' output values

pub null()

pub start() : result | phidden, pehidden, poutput, peoutput
' 0 is ok
  ' size of weight table must match expected based on node sizes
  phidden, pehidden, poutput, peoutput := nn_config.getWeights()

  if (pehidden-phidden)/4 <> (nn_config.InputNodes+1)*nn_config.HiddenNodes
    debug(" Hidden weight size mis-match ", udec((pehidden-phidden)/4), " ", udec((nn_config.InputNodes+1)*nn_config.HiddenNodes))
    return 1
  if (peoutput-poutput)/4 <> (nn_config.HiddenNodes + 1)*nn_config.OutputNodes
    debug(" Output weight size mis-match ", udec((peoutput-poutput)/4), " ", udec((nn_config.HiddenNodes + 1)*nn_config.OutputNodes))
    return 2
  return 0

pub drive_nn(pInput, pOutput, minspeed, maxspeed) | index, pout, mid, range
' translate between demo_dual_motor_rc input/output
'   input: 0.0-1.0, lidar detection range (B, BL, L, FL, F, FR, R, BR, Speed, Direction, Rotation)
'   output: -100 to 100, speed, direction, rotation speed
' 137-168us with 5 input, 6 hidden, 2 output and log_w_approx_exp_no_overflow16_clamped sigmoid
' 329us-392us with 11 input, 12 hidden, 3 output
  pout := InputToOutput(pInput)                                                 ' input to NN to obtain output
  range := float(maxspeed - minspeed)
  mid := range /. 2.0
  repeat nn_config.OutputNodes with index
    long[pOutput][index] := round(long[pout][index] *. range -. mid)            ' convert 0 -> +1 to -100 to 100

pri InputToOutput(pfTestInput) : poutputret | tempindex, outer, phidden, pehidden, poutput, peoutput
' core of the neutral network
' input nodes are  11: 0.0-1.0 higher number is closer: back, back-left, left, front-left, front, front-right, right, back-right
' output nodes are  3: 0.0-1.0 x/y/rotation
'   x/y: 0 is full speed backwards, 0.5 is stopped, 1.0 is full speed forwards
'     r: 0 is full speed anti-clockwise, 0.5 is stopped, 1.0 is full speed clockwise
' hidden nodes are 12
'
' cordic operations (1 multiply)*(inputnodes + outputnodes)*hiddennodes
'                   (hiddennodes+outputnode) * sigmoid(4 multiply, 2 divide)
' total approx = (168+60) 228 multiply, 30 divide, ~181us, so 46-55% of excution time
'
  ' Compute hidden layer activations
  ' float HiddenWeights[InputNodes + 1][HiddenNodes]                            ' weight per input node per hidden node
  phidden, pehidden, poutput, peoutput := nn_config.getWeights()
  tempindex := nn_config.InputNodes*nn_config.HiddenNodes                       ' bias is handled as an extra input node
  repeat nn_config.HiddenNodes with outer
    fHidden[outer] := utilities.sigmoid(utilities.SumMultiply(long[phidden][tempindex++], outer, pfTestInput, phidden, nn_config.InputNodes, nn_config.HiddenNodes)) ' total per hidden node, curve flattened using logistic function

  ' Compute output layer activations
  ' float OutputWeights[HiddenNodes + 1][OutputNodes];                          ' weight per hidden node per output node
  tempindex := nn_config.HiddenNodes*nn_config.OutputNodes                      ' bias is handled as an extra hidden node
  repeat nn_config.OutputNodes with outer
    fOutput[outer] := utilities.sigmoid(utilities.SumMultiply(long[poutput][tempindex++], outer, @fHidden, poutput, nn_config.HiddenNodes, nn_config.OutputNodes)) ' total per output node, curve flattened using logistic function

  return @fOutput
'
VAR
  byte disp[9]

DAT
lidardisp   byte "B#L#F#R#", 0

PUB updatedisplaylidar(pfin, off, size) : result | i
' convert lidar detection into displayable string
'   value 0.0 -> " "
'   value > 0.0 and < 0.5 -> "."
'   value >= 0.5 -> "LFR#"
'
  strcopy(@disp, @lidardisp+off, size)
  byte[@disp][size] := 0
  repeat size with i
    if long[pfin][i] ==. 0.0
      disp[i] := " "
    elseif long[pfin][i] <. 0.5
      disp[i] := "."
  return @disp
'
' set of tests that run the Lidar simultated inputs through the neutral network and prints the results
'
pub test_nn() | pftest, nout[3], i, t, clk, ptest, petest, testvectorsize
' run set of tests on nn
'
  clk := clkfreq/1_000_000
  ptest, petest, testvectorsize := nn_config.getTests()
  repeat ((petest - ptest)/(4*testvectorsize)) with i
    pftest := @long[ptest][testvectorsize*i]
    t := getct()
    drive_nn(pftest, @nout, -100, 100)
    t := getct() - t
    debug("test", udec_(i+1), " ", udec_(t/clk), "us lidar=(", zstr_(updatedisplaylidar(pftest, 0, 8)), ") motors= ", sdec_long_array_(@nout, 3))
'
con { license }
{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}