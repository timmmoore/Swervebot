{PID}


CON
  DEBUG_OUTPUT      =           500

OBJ
  serial        : "isp_serial_singleton_tmm"
  utilities     : "utilities"

VAR
  long sch, maxwrap, maxoutput
  long sKp, sKi, sKd                                    ' float
  long currentpos, setpos
  long error[3]                                         ' float
  long lasttime, lastout
  word debug3

PUB null()
  ' This is not a top-level object

PUB init(ch, wrap, out)
  lasttime := getms()
  longmove(@sch, @ch, 3)
  lastout := currentpos := -1

PUB setconstants(ch, Kp, Ki, Kd)
  ' out us maximum output value
  ' wrap is maximum input value
  if utilities.longcomp(@sKp, @Kp, 3, true) && debugoutput()
    ' Kp, Ki, Kd are floats
    serial.fstr4(string("PID%d constants %.2g %.2g %.2g\r"), ch, sKp, sKi, sKd)

PUB currentposition(value)
  if (value <> currentpos\value) && debugoutput()
    serial.fstr3(string("PID%d currentposition %d %d\r"), sch, value, currentpos)

PUB setposition(value)
  if (value <> setpos\value) && debugoutput()
    serial.fstr3(string("PID%d setposition %d\r"), sch, value, setpos)

{
https://en.wikipedia.org/wiki/PID_controller

  A0 := Kp + Ki*dt + Kd/dt
  A1 := -Kp - 2*Kd/dt
  A2 := Kd/dt
  error[2] := 0 // e(t-2)
  error[1] := 0 // e(t-1)
  error[0] := 0 // e(t)
  output := u0  // Usually the current value of the actuator

loop:
  error[2] := error[1]
  error[1] := error[0]
  error[0] := setpoint - measured_value
  output := output + A0 * error[0] + A1 * error[1] + A2 * error[2]
  wait(dt)
  goto loop
}
PUB output() : out | dt, time, temp, A[3]
'' output is +- maxoutput
  ' calculate dt each time
  dt := float((time := getms()) - lasttime)
  lasttime := time
  ' find shortest angle allowing wrapping
  error[2], error[1], error[0] := error[1], error[0], float(utilities.wrapangles(setpos, currentpos, maxwrap))
  ifnot dt ==. 0.0
    temp := sKd/.dt
  A[0] := sKp +. sKi*.dt +. temp
  A[1] := -.sKp -. 2.0*.temp
  A[2] := temp
  out := utilities.clamp(lastout + round(A[0]*.error[0] +. A[1]*.error[1] +. A[2]*.error[2]), maxoutput)
  time := getms() - lasttime
  if (out <> lastout) && debugoutput()
    serial.fstr5(string("PID%d output %d %d %.2g %.2g"), sch, out, lastout, dt, temp)
    serial.fstr7(string(" %.2g %.2g %.2g %.2g %.2g %.2g %d\r"), A[0], error[0], A[1], error[1], A[2], error[2], time)
  lastout := out

PRI debugoutput() : retv
  retv := debug3 > DEBUG_OUTPUT

PUB updatedebug(tdebug3)
  debug3 := tdebug3
'