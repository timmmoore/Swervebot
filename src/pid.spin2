{PID

                timmoore

}


CON
  DEBUG_OUTPUT      =           500

OBJ
  utilities     : "utilities"

VAR
  long sch, maxwrap, maxoutput
  long sKp, sKi, sKd                                    ' float, defaults to 0.0
  long currentpos, setpos
  long error1, error2                                   ' float, defaults to 0.0
  long lasttime, lastout
  word debug3

PUB null()
  ' This is not a top-level object

PUB init(ch, wrap, out)
  longmove(@sch, @ch, 3)
  lastout := currentpos := -1
  lasttime := getms()

PUB setconstants(ch, Kp, Ki, Kd)
  ' out us maximum output value
  ' wrap is maximum input value
  if utilities.longcomp(@sKp, @Kp, 3, 0, true) && debugoutput(UTILITIES.DEBUGOUT4)
    ' Kp, Ki, Kd are floats
    debug("PID", sdec_(ch), " constants ", fdec_(sKp, sKi, sKd))

PUB currentposition(value)
  if (value <> currentpos\value) && debugoutput(UTILITIES.DEBUGOUT3)
    debug("PID", sdec_(sch), " currentposition ", sdec_(currentpos))

PUB setposition(value)
  if (value <> setpos\value) && debugoutput(UTILITIES.DEBUGOUT3)
    debug("PID", sdec_(sch), " setposition ", sdec_(setpos))

{
https://en.wikipedia.org/wiki/PID_controller

  A0 := Kp + Ki*dt + Kd/dt
  A1 := -Kp - 2*Kd/dt
  A2 := Kd/dt
  error[2] := 0 ' e(t-2)
  error[1] := 0 ' e(t-1)
  error[0] := 0 ' e(t)
  output := u0  ' Usually the current value of the actuator

loop:
  error[2] := error[1]
  error[1] := error[0]
  error[0] := setpoint - measured_value
  output := output + A0 * error[0] + A1 * error[1] + A2 * error[2]
  wait(dt)
  goto loop
}
PUB output() : out, delta | dt, time, A0, A1, A2, error0
'' output is +- maxoutput
  ' calculate dt and A? constants each time, A2 default to 0.0
  dt := float((time := getms()) - lasttime\time)/.1000.0
  ifnot dt ==. 0.0
    A2 := sKd/.dt
  A0 := sKp +. sKi*.dt +. A2
  A1 := -2.0*.A2 -. sKp
  ' error0 is shortest angle allowing for wrapping, note no wrap if maxwrap is 0
  error0 := float(delta := utilities.wrapangles(currentpos, setpos, maxwrap))
  out := utilities.clamp(lastout + round(A0*.error0 +. A1*.error1 +. A2*.error2), maxoutput)
  ' how long the above calculations took
  time := getms() - time
  if (out <> lastout) && debugoutput(UTILITIES.DEBUGOUT2)
    debug("PID", sdec_(sch), " output o:", sdec_(out), " lo:", sdec_(lastout), " c:", sdec_(currentpos), " s:", sdec_(setpos), " dt:", fdec_(dt), fdec(A0, error0, A1, error1, A2, error2))
  ' update inputs for next time, lasttime already been updated
  error2, error1, lastout := error1, error0, out

PRI debugoutput(type) : retv
  retv := utilities.debugoutput(debug3, type)

PUB updatedebug(tdebug3)
  debug3 := tdebug3
'
con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}