{
  PWM - SRX encoder:
        pin 2         5V
        pin 10        Gnd
        pin 9         pwm, 3.3V

  Uses contigous pins
  Can set offset for each encoder
}
CON
  NOPWMIN       = 1

  DEBUG_OUTPUT  = 500

VAR
  long setup
  long pp, minv, maxv                                   ' start pin, min/max values
  long debug1
  long lastvalues[NOPWMIN]
  long angleoffsets[NOPWMIN]                            ' encoder angle offset, 0-MAXANGLE
  long pinoffsets[NOPWMIN]                              ' encoder actual pin
  long minclk[NOPWMIN], maxclk[NOPWMIN]
  long minencoder[NOPWMIN], maxencoder[NOPWMIN]

OBJ
  serial        : "isp_serial_singleton_tmm"
  utilities     : "utilities"

PUB null()
  ' This is not a top-level object

PUB start(pin, minvalue, maxvalue, ppinoffsets, poffsets, pminencoder, pmaxencoder) | i
  stop()
  longmove(@pp, @pin, 3)                                ' start pin and max/min output values
  longmove(@angleoffsets, poffsets, NOPWMIN)            ' angle offset of each encoder
  longmove(@pinoffsets, ppinoffsets, NOPWMIN)           ' pin offset of each encoder
  '        0.9us @ 200000000/sec -> 90*2 -> 180
  '        4506us @ 200000000/sec -> 450600*2 -> 901200
  longmove(@minclk, pminencoder, NOPWMIN)               ' min pwm value per encoder
  longmove(@maxclk, pmaxencoder, NOPWMIN)               ' max pwm value per encoder
  longfill(@minencoder, $FFFFFFFF, NOPWMIN)             ' track max pwm value per encoder
  pinstart(pp ADDPINS NOPWMIN-1, P_HIGH_TICKS, 0, 0)    ' start for NOPWMIN pins, clock ticks for pin high
  setup~~                                               ' mark setup

PUB stop()
  if (setup~)
    pinclear(pp ADDPINS NOPWMIN-1)                      ' disable smart pin
  longfill(@lastvalues, -1, NOPWMIN)

PUB readall(pvals) | ch
  repeat ch from 0 to NOPWMIN-1
    long[pvals][ch] := read(ch, false)

PUB read(ch, display) : out | raw, map, dout
  map := utilities.map(raw := rdpin(pp+pinoffsets[ch]), minclk[ch], maxclk[ch], minv, maxv) ' map to required range
  if raw +< minencoder[ch]
    minencoder[ch] := raw                               ' keep min encoder value
  if raw +> maxencoder[ch]
    maxencoder[ch] := raw                               ' keep max encoder value
  out := (map + angleoffsets[ch]) // maxv               ' add the angular offset for the encoder and wrap to maxv
  if (out <> lastvalues[ch]\out)
    dout := debugoutput(UTILITIES.DEBUGOUT2)            ' if changed see if we want debug output
  if display or dout                                    ' output offset value assuming current position is 0
    serial.fstr8(string("encoder%d/%d raw:%u map:%d out:%d offset:%.2g min:%u max:%u\r"), ch, pinoffsets[ch], raw>>1, map, out, (float((maxv - map)//maxv)*.360.0)/.1024.0, minencoder[ch]>>1, maxencoder[ch]>>1)

PUB updatedebug(tdebug)
  debug1 := tdebug

PRI debugoutput(type) : retv
  retv := utilities.debugoutput(debug1, type)
'
con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}