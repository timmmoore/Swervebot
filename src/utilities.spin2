{Utilities}

OBJ
  'serial        : "isp_serial_singleton_tmm"

PUB null()
  ' This is not a top-level object

PUB wrapangles(angle1, angle2, maxangle) : minangle
  ' find the smallest angle between request and current angles, moving in either direction, allowing for wrapround
  ' maxangle must be +ve
  minangle := angle1 - angle2
  if abs(minangle) > maxangle>>1
    minangle -= (minangle > 0) ? maxangle : -maxangle

PUB map(value, inmin, inmax, outmin, outmax) : result
'' Maps value in range inmin..inmax to new value in range outmin..outmax
  value := inmin #> value <# inmax
  result := (value - inmin) * (outmax - outmin) / (inmax - inmin) + outmin

PUB clamp(input, tmaxinput) : s
' +- max clamp
  s := -tmaxinput #> input <# tmaxinput

PUB fullclamp(input, tmininput, tmaxinput) : s
' separate min and max clamping values
  s := tmininput #> input <# tmaxinput                  ' greater= min; less= max

PUB longcomp(p1, p2, count, update) : retv
' return true if p1 and p2 not the same
  repeat retv from 0 to count-1
    if long[p1][retv] <> long[p2][retv]
      quit
  if (retv := retv < count) && update
    longmove(p1, p2, count)

PUB scaleangle(inangle, max) : scaledangle
' unsigned inangle
  scaledangle := inangle SCA max

PUB maxlong(pinput, count, inc) : highest | index, temp
' find maximum absolute value
  highest := 0
  repeat index from 0 to count-1 step inc
    if (temp := abs(long[pinput][index])) > highest
      highest := temp

PUB swapbytes(val) : result
' reverse order of bytes in a long
  org
    mov     result, val
    movbyts result, #%%0123
  end
'