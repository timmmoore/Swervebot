{
  Converts x, y, r movement requests into motor speeds for 4 swerve modules.
  Each swerve module consists of 2 motors: drive and steering.
  There is an absolute PWM encoder on the steering output.
  There is a quadrature encoder on the drive motor.

  Currently only supports 4 swerve modules.
}

CON
  MAXSPEEDSHIFT = 12
  MAXSPEED      = 1<<MAXSPEEDSHIFT                      ' -4096 < 0 < 4096
  MAXANGLE      = 1024                                  ' 0-1024 is 0-360deg, +ve is clockwise, -ve anticlockwise

  MINDRIVESPEED = 30
  MINSTEERINGSPEED = 40

  ' 4 swerve modules, each has a drive and a steering motor
  ' 4 modules are ordered as FL (front left), FR (front right), BL (back left), BR (back right)
  MAX_SWERVE_MODULES = 4
  MAX_ENCODERS  = MAX_SWERVE_MODULES                    ' 1 per swerve module

                                                        ' adjust drive encoder ticks/sec to match +-MAXSPEED
  DRIVEENCODERTICKS             = 6                     ' quadratue encoder: max a ticks per motor revolution in 100ms

  NO_MOTOR1         =           MOTOR.NO_MOTOR1
  NO_MOTOR2         =           MOTOR.NO_MOTOR2

  BOT_WIDTH                     = 0
  BOT_LENGTH                    = 1

  D_FRONT_LEFT                  = 0
  S_FRONT_LEFT                  = 1
  A_FRONT_LEFT                  = 0
  D_FRONT_RIGHT                 = 2
  S_FRONT_RIGHT                 = 3
  A_FRONT_RIGHT                 = 1
  D_BACK_LEFT                   = 4
  S_BACK_LEFT                   = 5
  A_BACK_LEFT                   = 2
  D_BACK_RIGHT                  = 6
  S_BACK_RIGHT                  = 7
  A_BACK_RIGHT                  = 3

  MINTHROTTLE                   = 50
  MINSPEEDX                     = 50
  MINSPEEDY                     = 50
  MINSPEEDR                     = 50

VAR
  long speeders[MAX_SWERVE_MODULES*2]                   ' 0: drive motor speeds, 1: steering speed for 4 swerve modules
  long angles[MAX_SWERVE_MODULES]                       ' angle for 4 swerve modules
  long motors[MAX_SWERVE_MODULES*2]                     ' motor channels
  word debug2
  long lastcx, lastcy, lastcr, motorsareoff
  long acctime
  long cosbot[2]                                        ' float, bot size/rad
  long overridemax[2]
  word inverts[MAX_SWERVE_MODULES*2]
  long encodertime
  long driveencodercount[MAX_SWERVE_MODULES]
  long driveencodervelocity[MAX_SWERVE_MODULES]         ' drive encoder velocity
  long driveencodertime[MAX_SWERVE_MODULES]
  long actualangles[MAX_SWERVE_MODULES]                 ' set drive motor speed
  long actualspeeds[MAX_SWERVE_MODULES]                 ' swerve angle from encoder

OBJ
  serial        : "isp_serial_singleton_tmm"
  encoder       : "pwm_in" | NOPWMIN = MAX_ENCODERS     ' angle position of each swerve
  pid[MAX_ENCODERS] : "pid"                             ' pid for controling angle of each swerve
  driveencoders[MAX_SWERVE_MODULES] : "jm_quadrature_tmm"
  dpid[MAX_ENCODERS] : "pid"                            ' pid for controling speed from drive motors of each swerve
  utilities     : "utilities"
  motor         : "motordriver"                         ' motor drivers for drive and steering motors
  fan           : "motorfan"                            ' fan to cool motor drivers

PUB null()
  ' This is not a top-level object

PUB start(scl, sda, epin, tfpin, pbot, ppinoffsets, pangleoffsets, pminencoder, pmaxencoder, pinvert, pmotor, pdencoders) : retv | ch, t1, t2, rad
  '' start 4 swerve modules
  rad := fsqrt(long[pbot][BOT_WIDTH]*.long[pbot][BOT_WIDTH] +. long[pbot][BOT_LENGTH]*.long[pbot][BOT_LENGTH])/.2.0 ' diag of bot
  cosbot[BOT_WIDTH], cosbot[BOT_LENGTH] := long[pbot][BOT_WIDTH]/.rad, long[pbot][BOT_LENGTH]/.rad
  acctime := getms()
  if debugoutput(UTILITIES.DEBUGOUT2)
    serial.fstr3(string("Swerve starting %.2g %.2g %.2g\r"), long[pbot][BOT_WIDTH], long[pbot][BOT_LENGTH], rad)

  longmove(@motors, pmotor, MAX_SWERVE_MODULES*2)       ' conversion between swerve motor number and motor driver motor number
  repeat ch from 0 to 7                                 ' switch invert flags to match order of motordrivers, not swerve modules
    inverts[long[pmotor][ch]] := word[pinvert][ch]
  retv := motor.start(scl, sda, @inverts)

  encoder.start(epin, 0, MAXANGLE, ppinoffsets, pangleoffsets, pminencoder, pmaxencoder) ' 0-MAXANGLE output

  fan.startfan(tfpin)                                   ' config fan

  repeat ch from 0 to MAX_SWERVE_MODULES-1
    pid[ch].init(ch, MAXANGLE, MAXSPEED)                ' 0-MAXANGLE input, +- MAXSPEED output
    pid[ch].setposition(0)                              ' start angle
    driveencoders[ch].start(long[pdencoders][ch], long[pdencoders][ch+4], clkfreq/10)
    driveencodercount[ch], driveencodervelocity[ch] := driveencoders[ch].read() ' current quadrature count
    driveencodertime[ch] := getms()
    dpid[ch].init(ch, 0, MAXSPEED)                      ' no wrapping of input, +- MAXSPEED output
    dpid[ch].setposition(0)                             ' start speed
  if debugoutput(UTILITIES.DEBUGOUT4)
    serial.fstr1(string("Swerve started %x\r"), retv)

PUB stop()
  motor.stop()
  fan.stopfan()                                         ' stop fan

PUB setpidconstants(pSKp, pSKi, pSKd, pDKp, pDKi, pDKd, povermax) | ch
  longmove(@overridemax, povermax, 2)
  '' config pid constants for steering pids
  repeat ch from 0 to MAX_SWERVE_MODULES-1
    pid[ch].setconstants(ch, long[pSKp][ch], long[pSKi][ch], long[pSKd][ch])
    dpid[ch].setconstants(ch, long[pDKp][ch], long[pDKi][ch], long[pDKd][ch])

PUB getactuals(pspeeds, paspeeds, pangles)
  longmove(pspeeds, @actualspeeds, MAX_SWERVE_MODULES)
  longmove(paspeeds, @driveencodervelocity, MAX_SWERVE_MODULES)
  longmove(pangles, @actualangles, MAX_SWERVE_MODULES)

pub stopmotors()
  longfill(@actualspeeds, 0, MAX_SWERVE_MODULES)        ' clear telemetry speeds
  longfill(@driveencodervelocity, 0, MAX_SWERVE_MODULES)
  longfill(@lastcx, 0, 3)                               ' clear acceleration history
  motor.stopmotors()                                    ' motors into stop/coast
  fan.fanoff()                                          ' fan stop on timer

PRI setmotorspeeds(pspeeds) : retv | ch, speed, drive, off
  ' set all motor speeds, drive and angle
  ' swerve modules on 1st and 2nd motor driver
  repeat ch from 0 to 7
    speed := long[pspeeds][ch]
    if (drive := ch & 1) == 0
      actualspeeds[ch>>1] := speed                      ' update drive telemetry
    ' final clamping to max motor speed, convert between swerve motor no to motor driver motor no
    motor.run(motors[ch], off := (abs(speed) > minmotorspeed[drive]) ? utilities.clamp(speed, overridemax[drive]) : 0)
    retv |= off

PRI drivespeeds(pspeeds) : retv | ch, ponespeed, delta, dpido, denc, ct, dt
  repeat ch from 0 to MAX_SWERVE_MODULES-1
    ponespeed := @long[pspeeds][ch<<1]                  ' index for this swerve's motor speeds
    driveencodercount[ch], driveencodervelocity[ch] := driveencoders[ch].read() ' current quadrature count
    ct := getms()
    denc := (DRIVEENCODERTICKS * driveencodervelocity[ch] * 1000)/(dt := (ct - driveencodertime[ch]))
    driveencodertime[ch] := ct
    dpid[ch].currentposition(denc)
    dpid[ch].setposition(long[ponespeed])               ' requested drive motor speed
    dpido, delta := dpid[ch].output()                   ' update drive motor speed
    if debugoutput(UTILITIES.DEBUGOUT3)
      serial.fstr6(string("drivespeeds %s %d %d %d %d %d\r"), @@sptr[ch], dt, driveencodervelocity[ch], denc, long[ponespeed], dpido)
    'long[ponespeed] := dpido
    retv |= delta <> 0                                  ' current and set drive speeds not same

PRI angletospeed(pspeeds, pangles) : retv | rawangle, requestangle, ch, wrappedangle, ponespeed, delta
  ' convert required angle to motor speed to get there
  ' return false if all swerves are at correct angle
  repeat ch from 0 to MAX_SWERVE_MODULES-1
    ponespeed := @long[pspeeds][ch<<1]                  ' index for this swerve's motor speeds
    actualangles[ch] := rawangle := encoder.read(ch, false) ' current angular position, encoder handles encoder offset
    pid[ch].currentposition(rawangle)                   ' current angle of swerve
    ' if request/current angle > MAXANGLE/2 apart then pid will wrap and invert
    wrappedangle := utilities.wrapangles(rawangle, requestangle := long[pangles][ch], MAXANGLE)
    SwerveDebug(1, @@sptr[ch], rawangle, long[ponespeed], long[ponespeed][1], long[pangles][ch], requestangle, wrappedangle)
    ' if request/current angles > MAXANGLE/4 apart then invert the drive speed and subtract MAXANGLE/2 from requestangle
    if(abs(wrappedangle) > MAXANGLE/4)
      ' change request angle by MAXANGLE/2
      requestangle := (requestangle - MAXANGLE/2) // MAXANGLE
      ' and invert the drive speed
      -= long[ponespeed]
    SwerveDebug(2, @@sptr[ch], rawangle, long[ponespeed], long[ponespeed][1], long[pangles][ch], requestangle, wrappedangle)
    pid[ch].setposition(requestangle)                   ' wanted angle of swerve
    long[ponespeed][1], delta := pid[ch].output()       ' speed to move steering motor
    retv |= long[ponespeed][1] <> 0                     ' have we reached correct steering angle? i.e. steering motor not moving
    ' slowdown drive speed depending on how far out of alignment the swerve module is
    long[ponespeed] := qcos(long[ponespeed], delta, MAXANGLE)
    SwerveDebug(3, @@sptr[ch], rawangle, long[ponespeed], long[ponespeed][1], long[pangles][ch], requestangle, wrappedangle)

PRI SwerveDebug(no, p1, p2, p3, p4, p5, p6, p7)
  if debugoutput(UTILITIES.DEBUGOUT3)
    serial.fstr8(string("Swerve%d %s %d %d %d %d %d %d\r"), no, p1, p2, p3, p4, p5, p6, p7)

PRI scalemaxspeed(pspeeds) | highest, index
  ' scale max speeds if over or under MAXSPEED
  ' find the largest absolute drive speed
  highest := utilities.maxlong(pspeeds, 4, D_FRONT_RIGHT-D_FRONT_LEFT)

  ' if largest absolute speed is above MAXSPEED then scale drive speeds to get the largest to MAXSPEED
  if(highest > MAXSPEED)
    repeat index from D_FRONT_LEFT to D_BACK_RIGHT step D_FRONT_RIGHT-D_FRONT_LEFT
      long[pspeeds][index] := scalespeed(long[pspeeds][index], highest)
  if debugoutput(UTILITIES.DEBUGOUT4)
    serial.fstr4(string("Swerve maxspeeds %d %d %d %d\r"), long[pspeeds][D_FRONT_LEFT], long[pspeeds][D_FRONT_RIGHT], long[pspeeds][D_BACK_LEFT], long[pspeeds][D_BACK_RIGHT])

PRI scalespeed(in, max) : scaled
  ' assumes in parameter value isn't too large, so multiplying by MAXSPEED doesn't overflow
  scaled := in << MAXSPEEDSHIFT
  scaled /= max

PRI calculate(x, y, r, pspeeds, pangles) | a, b, c, d, xrl, yrl, rl
' translate x, y and rotation into swerve speed and angle per swerve module
  rl := float(r)
  xrl, yrl := round(rl *. cosbot[BOT_WIDTH]), round(rl *. cosbot[BOT_LENGTH])
  a, b, c, d :=  y - yrl, y + yrl, -x - xrl, -x + xrl
  if debugoutput(UTILITIES.DEBUGOUT3)
    serial.fstr4(string("Swerve calculate %d %d %d %d\r"), a, b, c, d)

  ' xypol returns length and unsigned 32-bit angle, where $00000000..$FFFFFFFF = 0..359.9999999 degrees
  ' scale angle to MAXANGLE
  long[pspeeds][D_FRONT_LEFT],  long[pangles][A_FRONT_LEFT]  := scaleangle(xypol(b, c)) ' front, left
  long[pspeeds][S_FRONT_LEFT] := 0
  Swerve1Debug(0, pspeeds, pangles, D_FRONT_LEFT, A_FRONT_LEFT)
  long[pspeeds][D_FRONT_RIGHT], long[pangles][A_FRONT_RIGHT] := scaleangle(xypol(a, c)) ' front, right
  long[pspeeds][S_FRONT_RIGHT] := 0
  Swerve1Debug(1, pspeeds, pangles, D_FRONT_RIGHT, A_FRONT_RIGHT)
  long[pspeeds][D_BACK_LEFT],   long[pangles][A_BACK_LEFT]   := scaleangle(xypol(b, d)) ' back, left
  long[pspeeds][S_BACK_LEFT] := 0
  Swerve1Debug(2, pspeeds, pangles, D_BACK_LEFT, A_BACK_LEFT)
  long[pspeeds][D_BACK_RIGHT],  long[pangles][A_BACK_RIGHT]  := scaleangle(xypol(a, d)) ' back, right
  long[pspeeds][S_BACK_RIGHT] := 0
  Swerve1Debug(3, pspeeds, pangles, D_BACK_RIGHT, A_BACK_RIGHT)

PRI Swerve1Debug(no, pspeeds, pangles, p1, p2)
  if debugoutput(UTILITIES.DEBUGOUT3)
    serial.fstr4(string("Swerve %s speed/angle %d %d(%.2f)\r"), @@sptr[no], long[pspeeds][p1],  long[pangles][p2],  scaleangle360(long[pangles][p2]))

PRI scaleangle360(inangle) : scaledangle
' scale 0-MAXANGLE to 0-36000
  scaledangle := muldiv64(inangle, 36000, MAXANGLE)

PRI scaleangle(ind, inangle) : rd, scaledangle
' scale xypol output angle to 0-MAXANGLE
  rd, scaledangle := ind, inangle SCA MAXANGLE

CON
  ACCINTERVAL   = 20                                    ' acceleration limiting interval, ms
  ACCSHIFT      = 2                                     ' /4
  ACCLIMIT      = (DECOD ACCSHIFT)-1                    ' acceleration increments

PRI adjustandclampspeed(lastspeed, newspeed) : adjustedspeed | deltaspeed, upperclampspeed, lowerclampspeed

  deltaspeed := newspeed - lastspeed                    ' delta is 1/4 of the difference between current and requested speeds
  lowerclampspeed, upperclampspeed := newspeed, lastspeed
  if newspeed > lastspeed
    lowerclampspeed, upperclampspeed := lastspeed, newspeed ' default doesn't apply in this case
  deltaspeed += (deltaspeed > 0) ? ACCLIMIT : -ACCLIMIT ' make sure delta doesn't reduce to 0
                                                        ' clamp makes sure delta doesn't overrun
  adjustedspeed := utilities.fullclamp(lastspeed + (deltaspeed SAR ACCSHIFT), lowerclampspeed, upperclampspeed)

PRI limitacceleration(x, y, r) : lx, ly, lr, changed, notcomplete | lcx, lcy, lcr

  ' update speeds every ACCINTERVAL ms
  if(getms() > acctime)
    longmove(@lcx, @lastcx, 3)                          ' save for debug output
    lastcx := adjustandclampspeed(lastcx, x)
    Swerve2Debug("x", lcx, x, lastcx)
    lastcy := adjustandclampspeed(lastcy, y)
    Swerve2Debug("y", lcy, y, lastcy)
    lastcr := adjustandclampspeed(lastcr, r)
    Swerve2Debug("r", lcr, r, lastcr)
    acctime := getms() + ACCINTERVAL
    changed := true
  ' output not matching input speed, still have more ramping up/down to do
  notcomplete := utilities.longcomp(@lastcx, @x, 3, 0, false)
  longmove(@lx, @lastcx, 3)

PRI Swerve2Debug(type, last, in, out)
  if debugoutput(UTILITIES.DEBUGOUT3)
    serial.fstr4(string("Swerve %c limit l:%d i:%d n:%d\r"), type, last, in, out)

PRI minspeeds(x, y, r) : retv
  if (abs(x) < MINSPEEDX) and (abs(y) < MINSPEEDY) and (abs(r) < MINSPEEDR)
    return true

PUB update(x, y, r, off) : notcomplete | changed, newoffstate, previousoffstate, ch, temp
'' return true if needs calling again, either not fully update to speed or swerve angle not in position

  if debugoutput(UTILITIES.DEBUGOUT4)
    serial.fstr4(string("Swerve updating x:%d, y:%d, r:%d off: %d\r"), x, y, r, off)

  newoffstate, previousoffstate := motorsoff(off)
  ifnot newoffstate
    x, y, r, changed, notcomplete := limitacceleration(x, y, r)
    if(changed == true)
      if debugoutput(UTILITIES.DEBUGOUT3)
        serial.fstr3(string("Swerve updating after limiting x:%d, y:%d, r:%d\r"), x, y, r)

      calculate(x, y, r, @speeders, @angles)            ' calculate speed/angle for each swerve wheel

      scalemaxspeed(@speeders)                          ' scale max drive speeds, so speed not larger than +-MAXSPEED

      if !minspeeds(x, y, r)                            ' if we are not really moving dont hunt the steering motor
        notcomplete |= angletospeed(@speeders, @angles) ' convert steering angle to steering motor speed

      notcomplete |= drivespeeds(@speeders)             ' match drive speeds to motor encoders

      if setmotorspeeds(@speeders)                      ' set speeds of drive and steering motors
        fan.fanon()                                     ' turn on fan if any motor is driven
      else
        fan.fanoff()                                    ' turn off fan on timer if all motors are off
  elseifnot previousoffstate                            ' if not already off, make sure motors are off
    setmotorspeeds(@zerospeeds)
    fan.fanoff()                                        ' turn off fan on timer
  elseif (getms() - encodertime) > 1000
    repeat ch from 0 to MAX_SWERVE_MODULES-1
      encoder.read(ch, true)                            ' read encoder when motors off, so can manually adjust encoder offsets
    encodertime := getms()
  notcomplete |= fan.checkfan()                         ' check fan for updates, need to return notcomplete if timer is running
  if debugoutput(UTILITIES.DEBUGOUT4)
    serial.fstr3(string("Swerve updated %d %d %d\r"), changed, notcomplete, motorsareoff)

PRI motorsoff(off) : retv, previous
' return true if motors should be off, was off
  previous := motorsareoff\retv := off < MINTHROTTLE

var
  long olddebug3

PUB debugconfig(tdebug2, tdebug3) | ch
  'serial.fstr2(string("swervemotor debugconfig2 %d %d\r"), debug2, tdebug2)
  'serial.fstr1(string("swervemotor debugconfig3 %d\r"), tdebug3)
  if debug2 <> tdebug2
    debug2 := tdebug2
  if olddebug3 <> tdebug3
    olddebug3 := tdebug3
    encoder.updatedebug(tdebug3)
    motor.updatedebug(tdebug3)
    repeat ch from 0 to MAX_SWERVE_MODULES-1
      pid[ch].updatedebug(tdebug3)

PRI debugoutput(type) : retv
  retv := utilities.debugoutput(debug2, type)
  'serial.fstr3(string("swervemotor debug t:%d d:%d r:%d\r"), type, debug2, retv)

dat
  zerospeeds  long 0, 0, 0, 0, 0, 0, 0, 0
  sptr long @flptr, @frptr, @blptr, @brptr
  flptr byte "FL", 0
  frptr byte "FR", 0
  blptr byte "BL", 0
  brptr byte "BR", 0
  minmotorspeed long MINDRIVESPEED, MINSTEERINGSPEED
'
con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}