{Object_Title_and_Purpose}
{
float test
not less1
not less2
not less3
not less4
not less5
less6
not less7
less8

expect
float test
not less1
not less2
not less3
not less4
less5
less6
less7
less8
}

CON
  CLK_FREQ = 200_000_000                                                        ' system freq as a constant

  BR_SERIAL = 115_200                                                           ' terminal baud rate

  _clkfreq = CLK_FREQ                                                           ' set system clock


var
  long test1, test2

OBJ
  serial        : "jm_serial"

PUB main()

  serial.start(BR_SERIAL)

  waitms(1000)
  serial.fstr0(string("float test\r"))
  repeat
    waitms(1000)
    test1 := 1.0
    test2 := 2.0
    testf(1)

    test1 := -1.0
    test2 := 0.0
    testf(2)

    test1 := 0.0
    test2 := 1.0
    testf(3)

    test1 := -2.0
    test2 := -1.0
    testf(4)

PRI testf(t)
    serial.fstr4(string("\rtest %d test1:%d.%d(%x)"), t, trunc(test1), trunc(test1*.10.0)-(trunc(test1)*10), test1)
    serial.fstr3(string(" test2:%d.%d(%x)\r"), trunc(test2), trunc(test2*.10.0)-(trunc(test2)*10), test2)

   if test1 <. test2
     serial.fstr0(string("if test1 <. test2\r"))
   else
     serial.fstr0(string("else test1 <. test2\r"))
   if frel(test1, test2, $a2) 'test1 <. test2
     serial.fstr0(string("if frel test1 <. test2\r"))
   else
     serial.fstr0(string("else frel test1 <. test2\r"))

   if test2 >. test1
     serial.fstr0(string("if test2 >. test1\r"))
   else
     serial.fstr0(string("else test2 >. test1\r"))
   if frel(test2, test1, $a4) 'test2 >. test1
     serial.fstr0(string("if frel test2 >. test1\r"))
   else
     serial.fstr0(string("else frel test2 >. test1\r"))

   if test1 <=. test2
     serial.fstr0(string("if test1 <=. test2\r"))
   else
     serial.fstr0(string("else test1 <=. test2\r"))
   if frel(test1, test2, $aa) 'test1 <=. test2
     serial.fstr0(string("if frel test1 <=. test2\r"))
   else
     serial.fstr0(string("else frel test1 <=. test2\r"))

   if test2 >=. test1
     serial.fstr0(string("if test2 >=. test1\r"))
   else
     serial.fstr0(string("else test2 >=. test1\r"))
   if frel(test2, test1, $ac) 'test2 >=. test1
     serial.fstr0(string("if frel test2 >=. test1\r"))
   else
     serial.fstr0(string("else frel test2 >=. test1\r"))

   if test2 <. test1
     serial.fstr0(string("if test2 <. test1\r"))
   else
     serial.fstr0(string("else test2 <. test1\r"))
   if frel(test2, test1, $a2) 'test2 <. test1
     serial.fstr0(string("if frel test2 <. test1\r"))
   else
     serial.fstr0(string("else frel test2 <. test1\r"))

   if test1 >. test2
     serial.fstr0(string("if test1 >. test2\r"))
   else
     serial.fstr0(string("else test1 >. test2\r"))
   if frel(test1, test2, $a4) 'test1 >. test2
     serial.fstr0(string("if frel test1 >. test2\r"))
   else
     serial.fstr0(string("else frel test1 >. test2\r"))

   if test2 <=. test1
     serial.fstr0(string("if test2 <=. test1\r"))
   else
     serial.fstr0(string("else test2 <=. test1\r"))
   if frel(test2, test1, $aa) 'test2 <=. test1
     serial.fstr0(string("if frel test2 <=. test1\r"))
   else
     serial.fstr0(string("else frel test2 <=. test1\r"))

   if test1 >=. test2
     serial.fstr0(string("if test1 >=. test2\r"))
   else
     serial.fstr0(string("else test1 >=. test2\r"))
   if frel(test1, test2, $ac) 'test1 >=. test2
     serial.fstr0(string("if frel test1 >=. test2\r"))
   else
     serial.fstr0(string("else frel test1 >=. test2\r"))

PRI frel(t1, t2, p): r | x, w, y, _FFFFFFFF, paa

  w := t1
  x := t2
  paa := p
  _FFFFFFFF := $FFFFFFFF
  org

                bitl    w,#31           wcz     'make left-side comparable
                cmp     w,##$7F800001   wc      'NaN?
        if_z    neg     w                       '+/- %0_xxxxxxxx_mmmmmmmmmmmmmmmmmmmmmmm
        if_nc   skip    #%111

                bitl    x,#31           wcz     'make right-side comparable
                cmp     x,##$7F800001   wc      'NaN?
        if_z    neg     x                       '+/- %0_xxxxxxxx_mmmmmmmmmmmmmmmmmmmmmmm

        if_nc   skip    #%11111                 'if either NaN, return false

                cmps    w,x             wcz     'do comparison
        if_z    mov     y,#%1000                'equal?
        if_nz   mov     y,#%0100                'above?
        if_c    mov     y,#%0010                'below?
                test    y,paa           wc      'test mask

                muxc    r,_FFFFFFFF             'return boolean
  end
'
{
  original code from spin interupter

frel_           popa    w                       'pop left-side float

                bitl    w,#31           wcz     'make left-side comparable
                cmp     w,##$7F800001   wc      'NaN?
        if_z    neg     w                       '+/- %0_xxxxxxxx_mmmmmmmmmmmmmmmmmmmmmmm

                bitl    x,#31           wcz     'make right-side comparable
        if_c    cmp     x,##$7F800001   wc      'NaN?
        if_z    neg     x                       '+/- %0_xxxxxxxx_mmmmmmmmmmmmmmmmmmmmmmm

        if_nc   skip    #%11111                 'if either NaN, return false

                cmps    w,x             wcz     'do comparison
        if_z    mov     y,#%1000                'equal?
        if_nz   mov     y,#%0100                'above?
        if_c    mov     y,#%0010                'below?
                test    y,pa            wc      'test mask

        _ret_   muxc    x,_FFFFFFFF             'return boolean
}